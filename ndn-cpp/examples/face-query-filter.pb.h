// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: face-query-filter.proto

#ifndef PROTOBUF_face_2dquery_2dfilter_2eproto__INCLUDED
#define PROTOBUF_face_2dquery_2dfilter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ndn_message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_face_2dquery_2dfilter_2eproto();
void protobuf_AssignDesc_face_2dquery_2dfilter_2eproto();
void protobuf_ShutdownFile_face_2dquery_2dfilter_2eproto();

class FaceQueryFilterMessage;
class FaceQueryFilterMessage_FaceQueryFilter;

enum FaceQueryFilterMessage_FaceScope {
  FaceQueryFilterMessage_FaceScope_NON_LOCAL = 0,
  FaceQueryFilterMessage_FaceScope_LOCAL = 1
};
bool FaceQueryFilterMessage_FaceScope_IsValid(int value);
const FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage_FaceScope_FaceScope_MIN = FaceQueryFilterMessage_FaceScope_NON_LOCAL;
const FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage_FaceScope_FaceScope_MAX = FaceQueryFilterMessage_FaceScope_LOCAL;
const int FaceQueryFilterMessage_FaceScope_FaceScope_ARRAYSIZE = FaceQueryFilterMessage_FaceScope_FaceScope_MAX + 1;

const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_FaceScope_descriptor();
inline const ::std::string& FaceQueryFilterMessage_FaceScope_Name(FaceQueryFilterMessage_FaceScope value) {
  return ::google::protobuf::internal::NameOfEnum(
    FaceQueryFilterMessage_FaceScope_descriptor(), value);
}
inline bool FaceQueryFilterMessage_FaceScope_Parse(
    const ::std::string& name, FaceQueryFilterMessage_FaceScope* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FaceQueryFilterMessage_FaceScope>(
    FaceQueryFilterMessage_FaceScope_descriptor(), name, value);
}
enum FaceQueryFilterMessage_FacePersistency {
  FaceQueryFilterMessage_FacePersistency_PERSISTENT = 0,
  FaceQueryFilterMessage_FacePersistency_ON_DEMAND = 1,
  FaceQueryFilterMessage_FacePersistency_PERMANENT = 2
};
bool FaceQueryFilterMessage_FacePersistency_IsValid(int value);
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage_FacePersistency_FacePersistency_MIN = FaceQueryFilterMessage_FacePersistency_PERSISTENT;
const FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage_FacePersistency_FacePersistency_MAX = FaceQueryFilterMessage_FacePersistency_PERMANENT;
const int FaceQueryFilterMessage_FacePersistency_FacePersistency_ARRAYSIZE = FaceQueryFilterMessage_FacePersistency_FacePersistency_MAX + 1;

const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_FacePersistency_descriptor();
inline const ::std::string& FaceQueryFilterMessage_FacePersistency_Name(FaceQueryFilterMessage_FacePersistency value) {
  return ::google::protobuf::internal::NameOfEnum(
    FaceQueryFilterMessage_FacePersistency_descriptor(), value);
}
inline bool FaceQueryFilterMessage_FacePersistency_Parse(
    const ::std::string& name, FaceQueryFilterMessage_FacePersistency* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FaceQueryFilterMessage_FacePersistency>(
    FaceQueryFilterMessage_FacePersistency_descriptor(), name, value);
}
enum FaceQueryFilterMessage_LinkType {
  FaceQueryFilterMessage_LinkType_POINT_TO_POINT = 0,
  FaceQueryFilterMessage_LinkType_MULTI_ACCESS = 1
};
bool FaceQueryFilterMessage_LinkType_IsValid(int value);
const FaceQueryFilterMessage_LinkType FaceQueryFilterMessage_LinkType_LinkType_MIN = FaceQueryFilterMessage_LinkType_POINT_TO_POINT;
const FaceQueryFilterMessage_LinkType FaceQueryFilterMessage_LinkType_LinkType_MAX = FaceQueryFilterMessage_LinkType_MULTI_ACCESS;
const int FaceQueryFilterMessage_LinkType_LinkType_ARRAYSIZE = FaceQueryFilterMessage_LinkType_LinkType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FaceQueryFilterMessage_LinkType_descriptor();
inline const ::std::string& FaceQueryFilterMessage_LinkType_Name(FaceQueryFilterMessage_LinkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FaceQueryFilterMessage_LinkType_descriptor(), value);
}
inline bool FaceQueryFilterMessage_LinkType_Parse(
    const ::std::string& name, FaceQueryFilterMessage_LinkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FaceQueryFilterMessage_LinkType>(
    FaceQueryFilterMessage_LinkType_descriptor(), name, value);
}
// ===================================================================

class FaceQueryFilterMessage_FaceQueryFilter : public ::google::protobuf::Message {
 public:
  FaceQueryFilterMessage_FaceQueryFilter();
  virtual ~FaceQueryFilterMessage_FaceQueryFilter();

  FaceQueryFilterMessage_FaceQueryFilter(const FaceQueryFilterMessage_FaceQueryFilter& from);

  inline FaceQueryFilterMessage_FaceQueryFilter& operator=(const FaceQueryFilterMessage_FaceQueryFilter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceQueryFilterMessage_FaceQueryFilter& default_instance();

  void Swap(FaceQueryFilterMessage_FaceQueryFilter* other);

  // implements Message ----------------------------------------------

  FaceQueryFilterMessage_FaceQueryFilter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FaceQueryFilterMessage_FaceQueryFilter& from);
  void MergeFrom(const FaceQueryFilterMessage_FaceQueryFilter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 face_id = 105;
  inline bool has_face_id() const;
  inline void clear_face_id();
  static const int kFaceIdFieldNumber = 105;
  inline ::google::protobuf::uint64 face_id() const;
  inline void set_face_id(::google::protobuf::uint64 value);

  // optional string uri_scheme = 131;
  inline bool has_uri_scheme() const;
  inline void clear_uri_scheme();
  static const int kUriSchemeFieldNumber = 131;
  inline const ::std::string& uri_scheme() const;
  inline void set_uri_scheme(const ::std::string& value);
  inline void set_uri_scheme(const char* value);
  inline void set_uri_scheme(const char* value, size_t size);
  inline ::std::string* mutable_uri_scheme();
  inline ::std::string* release_uri_scheme();
  inline void set_allocated_uri_scheme(::std::string* uri_scheme);

  // optional string uri = 114;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 114;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional string local_uri = 129;
  inline bool has_local_uri() const;
  inline void clear_local_uri();
  static const int kLocalUriFieldNumber = 129;
  inline const ::std::string& local_uri() const;
  inline void set_local_uri(const ::std::string& value);
  inline void set_local_uri(const char* value);
  inline void set_local_uri(const char* value, size_t size);
  inline ::std::string* mutable_local_uri();
  inline ::std::string* release_local_uri();
  inline void set_allocated_local_uri(::std::string* local_uri);

  // optional .ndn_message.FaceQueryFilterMessage.FaceScope face_scope = 132;
  inline bool has_face_scope() const;
  inline void clear_face_scope();
  static const int kFaceScopeFieldNumber = 132;
  inline ::ndn_message::FaceQueryFilterMessage_FaceScope face_scope() const;
  inline void set_face_scope(::ndn_message::FaceQueryFilterMessage_FaceScope value);

  // optional .ndn_message.FaceQueryFilterMessage.FacePersistency face_persistency = 133;
  inline bool has_face_persistency() const;
  inline void clear_face_persistency();
  static const int kFacePersistencyFieldNumber = 133;
  inline ::ndn_message::FaceQueryFilterMessage_FacePersistency face_persistency() const;
  inline void set_face_persistency(::ndn_message::FaceQueryFilterMessage_FacePersistency value);

  // optional .ndn_message.FaceQueryFilterMessage.LinkType link_type = 134;
  inline bool has_link_type() const;
  inline void clear_link_type();
  static const int kLinkTypeFieldNumber = 134;
  inline ::ndn_message::FaceQueryFilterMessage_LinkType link_type() const;
  inline void set_link_type(::ndn_message::FaceQueryFilterMessage_LinkType value);

  // @@protoc_insertion_point(class_scope:ndn_message.FaceQueryFilterMessage.FaceQueryFilter)
 private:
  inline void set_has_face_id();
  inline void clear_has_face_id();
  inline void set_has_uri_scheme();
  inline void clear_has_uri_scheme();
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_local_uri();
  inline void clear_has_local_uri();
  inline void set_has_face_scope();
  inline void clear_has_face_scope();
  inline void set_has_face_persistency();
  inline void clear_has_face_persistency();
  inline void set_has_link_type();
  inline void clear_has_link_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 face_id_;
  ::std::string* uri_scheme_;
  ::std::string* uri_;
  ::std::string* local_uri_;
  int face_scope_;
  int face_persistency_;
  int link_type_;
  friend void  protobuf_AddDesc_face_2dquery_2dfilter_2eproto();
  friend void protobuf_AssignDesc_face_2dquery_2dfilter_2eproto();
  friend void protobuf_ShutdownFile_face_2dquery_2dfilter_2eproto();

  void InitAsDefaultInstance();
  static FaceQueryFilterMessage_FaceQueryFilter* default_instance_;
};
// -------------------------------------------------------------------

class FaceQueryFilterMessage : public ::google::protobuf::Message {
 public:
  FaceQueryFilterMessage();
  virtual ~FaceQueryFilterMessage();

  FaceQueryFilterMessage(const FaceQueryFilterMessage& from);

  inline FaceQueryFilterMessage& operator=(const FaceQueryFilterMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceQueryFilterMessage& default_instance();

  void Swap(FaceQueryFilterMessage* other);

  // implements Message ----------------------------------------------

  FaceQueryFilterMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FaceQueryFilterMessage& from);
  void MergeFrom(const FaceQueryFilterMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FaceQueryFilterMessage_FaceQueryFilter FaceQueryFilter;

  typedef FaceQueryFilterMessage_FaceScope FaceScope;
  static const FaceScope NON_LOCAL = FaceQueryFilterMessage_FaceScope_NON_LOCAL;
  static const FaceScope LOCAL = FaceQueryFilterMessage_FaceScope_LOCAL;
  static inline bool FaceScope_IsValid(int value) {
    return FaceQueryFilterMessage_FaceScope_IsValid(value);
  }
  static const FaceScope FaceScope_MIN =
    FaceQueryFilterMessage_FaceScope_FaceScope_MIN;
  static const FaceScope FaceScope_MAX =
    FaceQueryFilterMessage_FaceScope_FaceScope_MAX;
  static const int FaceScope_ARRAYSIZE =
    FaceQueryFilterMessage_FaceScope_FaceScope_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FaceScope_descriptor() {
    return FaceQueryFilterMessage_FaceScope_descriptor();
  }
  static inline const ::std::string& FaceScope_Name(FaceScope value) {
    return FaceQueryFilterMessage_FaceScope_Name(value);
  }
  static inline bool FaceScope_Parse(const ::std::string& name,
      FaceScope* value) {
    return FaceQueryFilterMessage_FaceScope_Parse(name, value);
  }

  typedef FaceQueryFilterMessage_FacePersistency FacePersistency;
  static const FacePersistency PERSISTENT = FaceQueryFilterMessage_FacePersistency_PERSISTENT;
  static const FacePersistency ON_DEMAND = FaceQueryFilterMessage_FacePersistency_ON_DEMAND;
  static const FacePersistency PERMANENT = FaceQueryFilterMessage_FacePersistency_PERMANENT;
  static inline bool FacePersistency_IsValid(int value) {
    return FaceQueryFilterMessage_FacePersistency_IsValid(value);
  }
  static const FacePersistency FacePersistency_MIN =
    FaceQueryFilterMessage_FacePersistency_FacePersistency_MIN;
  static const FacePersistency FacePersistency_MAX =
    FaceQueryFilterMessage_FacePersistency_FacePersistency_MAX;
  static const int FacePersistency_ARRAYSIZE =
    FaceQueryFilterMessage_FacePersistency_FacePersistency_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FacePersistency_descriptor() {
    return FaceQueryFilterMessage_FacePersistency_descriptor();
  }
  static inline const ::std::string& FacePersistency_Name(FacePersistency value) {
    return FaceQueryFilterMessage_FacePersistency_Name(value);
  }
  static inline bool FacePersistency_Parse(const ::std::string& name,
      FacePersistency* value) {
    return FaceQueryFilterMessage_FacePersistency_Parse(name, value);
  }

  typedef FaceQueryFilterMessage_LinkType LinkType;
  static const LinkType POINT_TO_POINT = FaceQueryFilterMessage_LinkType_POINT_TO_POINT;
  static const LinkType MULTI_ACCESS = FaceQueryFilterMessage_LinkType_MULTI_ACCESS;
  static inline bool LinkType_IsValid(int value) {
    return FaceQueryFilterMessage_LinkType_IsValid(value);
  }
  static const LinkType LinkType_MIN =
    FaceQueryFilterMessage_LinkType_LinkType_MIN;
  static const LinkType LinkType_MAX =
    FaceQueryFilterMessage_LinkType_LinkType_MAX;
  static const int LinkType_ARRAYSIZE =
    FaceQueryFilterMessage_LinkType_LinkType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LinkType_descriptor() {
    return FaceQueryFilterMessage_LinkType_descriptor();
  }
  static inline const ::std::string& LinkType_Name(LinkType value) {
    return FaceQueryFilterMessage_LinkType_Name(value);
  }
  static inline bool LinkType_Parse(const ::std::string& name,
      LinkType* value) {
    return FaceQueryFilterMessage_LinkType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ndn_message.FaceQueryFilterMessage.FaceQueryFilter face_query_filter = 150;
  inline int face_query_filter_size() const;
  inline void clear_face_query_filter();
  static const int kFaceQueryFilterFieldNumber = 150;
  inline const ::ndn_message::FaceQueryFilterMessage_FaceQueryFilter& face_query_filter(int index) const;
  inline ::ndn_message::FaceQueryFilterMessage_FaceQueryFilter* mutable_face_query_filter(int index);
  inline ::ndn_message::FaceQueryFilterMessage_FaceQueryFilter* add_face_query_filter();
  inline const ::google::protobuf::RepeatedPtrField< ::ndn_message::FaceQueryFilterMessage_FaceQueryFilter >&
      face_query_filter() const;
  inline ::google::protobuf::RepeatedPtrField< ::ndn_message::FaceQueryFilterMessage_FaceQueryFilter >*
      mutable_face_query_filter();

  // @@protoc_insertion_point(class_scope:ndn_message.FaceQueryFilterMessage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ndn_message::FaceQueryFilterMessage_FaceQueryFilter > face_query_filter_;
  friend void  protobuf_AddDesc_face_2dquery_2dfilter_2eproto();
  friend void protobuf_AssignDesc_face_2dquery_2dfilter_2eproto();
  friend void protobuf_ShutdownFile_face_2dquery_2dfilter_2eproto();

  void InitAsDefaultInstance();
  static FaceQueryFilterMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// FaceQueryFilterMessage_FaceQueryFilter

// optional uint64 face_id = 105;
inline bool FaceQueryFilterMessage_FaceQueryFilter::has_face_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_has_face_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::clear_has_face_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::clear_face_id() {
  face_id_ = GOOGLE_ULONGLONG(0);
  clear_has_face_id();
}
inline ::google::protobuf::uint64 FaceQueryFilterMessage_FaceQueryFilter::face_id() const {
  // @@protoc_insertion_point(field_get:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.face_id)
  return face_id_;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_face_id(::google::protobuf::uint64 value) {
  set_has_face_id();
  face_id_ = value;
  // @@protoc_insertion_point(field_set:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.face_id)
}

// optional string uri_scheme = 131;
inline bool FaceQueryFilterMessage_FaceQueryFilter::has_uri_scheme() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_has_uri_scheme() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::clear_has_uri_scheme() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::clear_uri_scheme() {
  if (uri_scheme_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_scheme_->clear();
  }
  clear_has_uri_scheme();
}
inline const ::std::string& FaceQueryFilterMessage_FaceQueryFilter::uri_scheme() const {
  // @@protoc_insertion_point(field_get:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri_scheme)
  return *uri_scheme_;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_uri_scheme(const ::std::string& value) {
  set_has_uri_scheme();
  if (uri_scheme_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_scheme_ = new ::std::string;
  }
  uri_scheme_->assign(value);
  // @@protoc_insertion_point(field_set:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri_scheme)
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_uri_scheme(const char* value) {
  set_has_uri_scheme();
  if (uri_scheme_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_scheme_ = new ::std::string;
  }
  uri_scheme_->assign(value);
  // @@protoc_insertion_point(field_set_char:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri_scheme)
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_uri_scheme(const char* value, size_t size) {
  set_has_uri_scheme();
  if (uri_scheme_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_scheme_ = new ::std::string;
  }
  uri_scheme_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri_scheme)
}
inline ::std::string* FaceQueryFilterMessage_FaceQueryFilter::mutable_uri_scheme() {
  set_has_uri_scheme();
  if (uri_scheme_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_scheme_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri_scheme)
  return uri_scheme_;
}
inline ::std::string* FaceQueryFilterMessage_FaceQueryFilter::release_uri_scheme() {
  clear_has_uri_scheme();
  if (uri_scheme_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_scheme_;
    uri_scheme_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_allocated_uri_scheme(::std::string* uri_scheme) {
  if (uri_scheme_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_scheme_;
  }
  if (uri_scheme) {
    set_has_uri_scheme();
    uri_scheme_ = uri_scheme;
  } else {
    clear_has_uri_scheme();
    uri_scheme_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri_scheme)
}

// optional string uri = 114;
inline bool FaceQueryFilterMessage_FaceQueryFilter::has_uri() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_has_uri() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::clear_has_uri() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& FaceQueryFilterMessage_FaceQueryFilter::uri() const {
  // @@protoc_insertion_point(field_get:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri)
  return *uri_;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri)
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri)
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri)
}
inline ::std::string* FaceQueryFilterMessage_FaceQueryFilter::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri)
  return uri_;
}
inline ::std::string* FaceQueryFilterMessage_FaceQueryFilter::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.uri)
}

// optional string local_uri = 129;
inline bool FaceQueryFilterMessage_FaceQueryFilter::has_local_uri() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_has_local_uri() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::clear_has_local_uri() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::clear_local_uri() {
  if (local_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    local_uri_->clear();
  }
  clear_has_local_uri();
}
inline const ::std::string& FaceQueryFilterMessage_FaceQueryFilter::local_uri() const {
  // @@protoc_insertion_point(field_get:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.local_uri)
  return *local_uri_;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_local_uri(const ::std::string& value) {
  set_has_local_uri();
  if (local_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    local_uri_ = new ::std::string;
  }
  local_uri_->assign(value);
  // @@protoc_insertion_point(field_set:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.local_uri)
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_local_uri(const char* value) {
  set_has_local_uri();
  if (local_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    local_uri_ = new ::std::string;
  }
  local_uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.local_uri)
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_local_uri(const char* value, size_t size) {
  set_has_local_uri();
  if (local_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    local_uri_ = new ::std::string;
  }
  local_uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.local_uri)
}
inline ::std::string* FaceQueryFilterMessage_FaceQueryFilter::mutable_local_uri() {
  set_has_local_uri();
  if (local_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    local_uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.local_uri)
  return local_uri_;
}
inline ::std::string* FaceQueryFilterMessage_FaceQueryFilter::release_local_uri() {
  clear_has_local_uri();
  if (local_uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = local_uri_;
    local_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_allocated_local_uri(::std::string* local_uri) {
  if (local_uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete local_uri_;
  }
  if (local_uri) {
    set_has_local_uri();
    local_uri_ = local_uri;
  } else {
    clear_has_local_uri();
    local_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.local_uri)
}

// optional .ndn_message.FaceQueryFilterMessage.FaceScope face_scope = 132;
inline bool FaceQueryFilterMessage_FaceQueryFilter::has_face_scope() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_has_face_scope() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::clear_has_face_scope() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::clear_face_scope() {
  face_scope_ = 0;
  clear_has_face_scope();
}
inline ::ndn_message::FaceQueryFilterMessage_FaceScope FaceQueryFilterMessage_FaceQueryFilter::face_scope() const {
  // @@protoc_insertion_point(field_get:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.face_scope)
  return static_cast< ::ndn_message::FaceQueryFilterMessage_FaceScope >(face_scope_);
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_face_scope(::ndn_message::FaceQueryFilterMessage_FaceScope value) {
  assert(::ndn_message::FaceQueryFilterMessage_FaceScope_IsValid(value));
  set_has_face_scope();
  face_scope_ = value;
  // @@protoc_insertion_point(field_set:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.face_scope)
}

// optional .ndn_message.FaceQueryFilterMessage.FacePersistency face_persistency = 133;
inline bool FaceQueryFilterMessage_FaceQueryFilter::has_face_persistency() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_has_face_persistency() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::clear_has_face_persistency() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::clear_face_persistency() {
  face_persistency_ = 0;
  clear_has_face_persistency();
}
inline ::ndn_message::FaceQueryFilterMessage_FacePersistency FaceQueryFilterMessage_FaceQueryFilter::face_persistency() const {
  // @@protoc_insertion_point(field_get:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.face_persistency)
  return static_cast< ::ndn_message::FaceQueryFilterMessage_FacePersistency >(face_persistency_);
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_face_persistency(::ndn_message::FaceQueryFilterMessage_FacePersistency value) {
  assert(::ndn_message::FaceQueryFilterMessage_FacePersistency_IsValid(value));
  set_has_face_persistency();
  face_persistency_ = value;
  // @@protoc_insertion_point(field_set:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.face_persistency)
}

// optional .ndn_message.FaceQueryFilterMessage.LinkType link_type = 134;
inline bool FaceQueryFilterMessage_FaceQueryFilter::has_link_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_has_link_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::clear_has_link_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FaceQueryFilterMessage_FaceQueryFilter::clear_link_type() {
  link_type_ = 0;
  clear_has_link_type();
}
inline ::ndn_message::FaceQueryFilterMessage_LinkType FaceQueryFilterMessage_FaceQueryFilter::link_type() const {
  // @@protoc_insertion_point(field_get:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.link_type)
  return static_cast< ::ndn_message::FaceQueryFilterMessage_LinkType >(link_type_);
}
inline void FaceQueryFilterMessage_FaceQueryFilter::set_link_type(::ndn_message::FaceQueryFilterMessage_LinkType value) {
  assert(::ndn_message::FaceQueryFilterMessage_LinkType_IsValid(value));
  set_has_link_type();
  link_type_ = value;
  // @@protoc_insertion_point(field_set:ndn_message.FaceQueryFilterMessage.FaceQueryFilter.link_type)
}

// -------------------------------------------------------------------

// FaceQueryFilterMessage

// repeated .ndn_message.FaceQueryFilterMessage.FaceQueryFilter face_query_filter = 150;
inline int FaceQueryFilterMessage::face_query_filter_size() const {
  return face_query_filter_.size();
}
inline void FaceQueryFilterMessage::clear_face_query_filter() {
  face_query_filter_.Clear();
}
inline const ::ndn_message::FaceQueryFilterMessage_FaceQueryFilter& FaceQueryFilterMessage::face_query_filter(int index) const {
  // @@protoc_insertion_point(field_get:ndn_message.FaceQueryFilterMessage.face_query_filter)
  return face_query_filter_.Get(index);
}
inline ::ndn_message::FaceQueryFilterMessage_FaceQueryFilter* FaceQueryFilterMessage::mutable_face_query_filter(int index) {
  // @@protoc_insertion_point(field_mutable:ndn_message.FaceQueryFilterMessage.face_query_filter)
  return face_query_filter_.Mutable(index);
}
inline ::ndn_message::FaceQueryFilterMessage_FaceQueryFilter* FaceQueryFilterMessage::add_face_query_filter() {
  // @@protoc_insertion_point(field_add:ndn_message.FaceQueryFilterMessage.face_query_filter)
  return face_query_filter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ndn_message::FaceQueryFilterMessage_FaceQueryFilter >&
FaceQueryFilterMessage::face_query_filter() const {
  // @@protoc_insertion_point(field_list:ndn_message.FaceQueryFilterMessage.face_query_filter)
  return face_query_filter_;
}
inline ::google::protobuf::RepeatedPtrField< ::ndn_message::FaceQueryFilterMessage_FaceQueryFilter >*
FaceQueryFilterMessage::mutable_face_query_filter() {
  // @@protoc_insertion_point(field_mutable_list:ndn_message.FaceQueryFilterMessage.face_query_filter)
  return &face_query_filter_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ndn_message

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ndn_message::FaceQueryFilterMessage_FaceScope> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ndn_message::FaceQueryFilterMessage_FaceScope>() {
  return ::ndn_message::FaceQueryFilterMessage_FaceScope_descriptor();
}
template <> struct is_proto_enum< ::ndn_message::FaceQueryFilterMessage_FacePersistency> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ndn_message::FaceQueryFilterMessage_FacePersistency>() {
  return ::ndn_message::FaceQueryFilterMessage_FacePersistency_descriptor();
}
template <> struct is_proto_enum< ::ndn_message::FaceQueryFilterMessage_LinkType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ndn_message::FaceQueryFilterMessage_LinkType>() {
  return ::ndn_message::FaceQueryFilterMessage_LinkType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_face_2dquery_2dfilter_2eproto__INCLUDED
