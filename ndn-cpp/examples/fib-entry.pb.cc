// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fib-entry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fib-entry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ndn_message {

namespace {

const ::google::protobuf::Descriptor* FibEntryMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FibEntryMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FibEntryMessage_Name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FibEntryMessage_Name_reflection_ = NULL;
const ::google::protobuf::Descriptor* FibEntryMessage_NextHopRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FibEntryMessage_NextHopRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* FibEntryMessage_FibEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FibEntryMessage_FibEntry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fib_2dentry_2eproto() {
  protobuf_AddDesc_fib_2dentry_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fib-entry.proto");
  GOOGLE_CHECK(file != NULL);
  FibEntryMessage_descriptor_ = file->message_type(0);
  static const int FibEntryMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FibEntryMessage, fib_entry_),
  };
  FibEntryMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FibEntryMessage_descriptor_,
      FibEntryMessage::default_instance_,
      FibEntryMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FibEntryMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FibEntryMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FibEntryMessage));
  FibEntryMessage_Name_descriptor_ = FibEntryMessage_descriptor_->nested_type(0);
  static const int FibEntryMessage_Name_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FibEntryMessage_Name, component_),
  };
  FibEntryMessage_Name_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FibEntryMessage_Name_descriptor_,
      FibEntryMessage_Name::default_instance_,
      FibEntryMessage_Name_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FibEntryMessage_Name, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FibEntryMessage_Name, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FibEntryMessage_Name));
  FibEntryMessage_NextHopRecord_descriptor_ = FibEntryMessage_descriptor_->nested_type(1);
  static const int FibEntryMessage_NextHopRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FibEntryMessage_NextHopRecord, face_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FibEntryMessage_NextHopRecord, cost_),
  };
  FibEntryMessage_NextHopRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FibEntryMessage_NextHopRecord_descriptor_,
      FibEntryMessage_NextHopRecord::default_instance_,
      FibEntryMessage_NextHopRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FibEntryMessage_NextHopRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FibEntryMessage_NextHopRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FibEntryMessage_NextHopRecord));
  FibEntryMessage_FibEntry_descriptor_ = FibEntryMessage_descriptor_->nested_type(2);
  static const int FibEntryMessage_FibEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FibEntryMessage_FibEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FibEntryMessage_FibEntry, next_hop_records_),
  };
  FibEntryMessage_FibEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FibEntryMessage_FibEntry_descriptor_,
      FibEntryMessage_FibEntry::default_instance_,
      FibEntryMessage_FibEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FibEntryMessage_FibEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FibEntryMessage_FibEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FibEntryMessage_FibEntry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fib_2dentry_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FibEntryMessage_descriptor_, &FibEntryMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FibEntryMessage_Name_descriptor_, &FibEntryMessage_Name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FibEntryMessage_NextHopRecord_descriptor_, &FibEntryMessage_NextHopRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FibEntryMessage_FibEntry_descriptor_, &FibEntryMessage_FibEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fib_2dentry_2eproto() {
  delete FibEntryMessage::default_instance_;
  delete FibEntryMessage_reflection_;
  delete FibEntryMessage_Name::default_instance_;
  delete FibEntryMessage_Name_reflection_;
  delete FibEntryMessage_NextHopRecord::default_instance_;
  delete FibEntryMessage_NextHopRecord_reflection_;
  delete FibEntryMessage_FibEntry::default_instance_;
  delete FibEntryMessage_FibEntry_reflection_;
}

void protobuf_AddDesc_fib_2dentry_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017fib-entry.proto\022\013ndn_message\"\234\002\n\017FibEn"
    "tryMessage\0229\n\tfib_entry\030\200\001 \002(\0132%.ndn_mes"
    "sage.FibEntryMessage.FibEntry\032\031\n\004Name\022\021\n"
    "\tcomponent\030\010 \003(\014\032.\n\rNextHopRecord\022\017\n\007fac"
    "e_id\030i \002(\r\022\014\n\004cost\030j \002(\r\032\202\001\n\010FibEntry\022/\n"
    "\004name\030\007 \002(\0132!.ndn_message.FibEntryMessag"
    "e.Name\022E\n\020next_hop_records\030\201\001 \003(\0132*.ndn_"
    "message.FibEntryMessage.NextHopRecord", 317);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fib-entry.proto", &protobuf_RegisterTypes);
  FibEntryMessage::default_instance_ = new FibEntryMessage();
  FibEntryMessage_Name::default_instance_ = new FibEntryMessage_Name();
  FibEntryMessage_NextHopRecord::default_instance_ = new FibEntryMessage_NextHopRecord();
  FibEntryMessage_FibEntry::default_instance_ = new FibEntryMessage_FibEntry();
  FibEntryMessage::default_instance_->InitAsDefaultInstance();
  FibEntryMessage_Name::default_instance_->InitAsDefaultInstance();
  FibEntryMessage_NextHopRecord::default_instance_->InitAsDefaultInstance();
  FibEntryMessage_FibEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fib_2dentry_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fib_2dentry_2eproto {
  StaticDescriptorInitializer_fib_2dentry_2eproto() {
    protobuf_AddDesc_fib_2dentry_2eproto();
  }
} static_descriptor_initializer_fib_2dentry_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FibEntryMessage_Name::kComponentFieldNumber;
#endif  // !_MSC_VER

FibEntryMessage_Name::FibEntryMessage_Name()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndn_message.FibEntryMessage.Name)
}

void FibEntryMessage_Name::InitAsDefaultInstance() {
}

FibEntryMessage_Name::FibEntryMessage_Name(const FibEntryMessage_Name& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndn_message.FibEntryMessage.Name)
}

void FibEntryMessage_Name::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FibEntryMessage_Name::~FibEntryMessage_Name() {
  // @@protoc_insertion_point(destructor:ndn_message.FibEntryMessage.Name)
  SharedDtor();
}

void FibEntryMessage_Name::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FibEntryMessage_Name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FibEntryMessage_Name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FibEntryMessage_Name_descriptor_;
}

const FibEntryMessage_Name& FibEntryMessage_Name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fib_2dentry_2eproto();
  return *default_instance_;
}

FibEntryMessage_Name* FibEntryMessage_Name::default_instance_ = NULL;

FibEntryMessage_Name* FibEntryMessage_Name::New() const {
  return new FibEntryMessage_Name;
}

void FibEntryMessage_Name::Clear() {
  component_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FibEntryMessage_Name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndn_message.FibEntryMessage.Name)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes component = 8;
      case 8: {
        if (tag == 66) {
         parse_component:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_component()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_component;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndn_message.FibEntryMessage.Name)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndn_message.FibEntryMessage.Name)
  return false;
#undef DO_
}

void FibEntryMessage_Name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndn_message.FibEntryMessage.Name)
  // repeated bytes component = 8;
  for (int i = 0; i < this->component_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->component(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndn_message.FibEntryMessage.Name)
}

::google::protobuf::uint8* FibEntryMessage_Name::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndn_message.FibEntryMessage.Name)
  // repeated bytes component = 8;
  for (int i = 0; i < this->component_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->component(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndn_message.FibEntryMessage.Name)
  return target;
}

int FibEntryMessage_Name::ByteSize() const {
  int total_size = 0;

  // repeated bytes component = 8;
  total_size += 1 * this->component_size();
  for (int i = 0; i < this->component_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->component(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FibEntryMessage_Name::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FibEntryMessage_Name* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FibEntryMessage_Name*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FibEntryMessage_Name::MergeFrom(const FibEntryMessage_Name& from) {
  GOOGLE_CHECK_NE(&from, this);
  component_.MergeFrom(from.component_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FibEntryMessage_Name::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FibEntryMessage_Name::CopyFrom(const FibEntryMessage_Name& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FibEntryMessage_Name::IsInitialized() const {

  return true;
}

void FibEntryMessage_Name::Swap(FibEntryMessage_Name* other) {
  if (other != this) {
    component_.Swap(&other->component_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FibEntryMessage_Name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FibEntryMessage_Name_descriptor_;
  metadata.reflection = FibEntryMessage_Name_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FibEntryMessage_NextHopRecord::kFaceIdFieldNumber;
const int FibEntryMessage_NextHopRecord::kCostFieldNumber;
#endif  // !_MSC_VER

FibEntryMessage_NextHopRecord::FibEntryMessage_NextHopRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndn_message.FibEntryMessage.NextHopRecord)
}

void FibEntryMessage_NextHopRecord::InitAsDefaultInstance() {
}

FibEntryMessage_NextHopRecord::FibEntryMessage_NextHopRecord(const FibEntryMessage_NextHopRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndn_message.FibEntryMessage.NextHopRecord)
}

void FibEntryMessage_NextHopRecord::SharedCtor() {
  _cached_size_ = 0;
  face_id_ = 0u;
  cost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FibEntryMessage_NextHopRecord::~FibEntryMessage_NextHopRecord() {
  // @@protoc_insertion_point(destructor:ndn_message.FibEntryMessage.NextHopRecord)
  SharedDtor();
}

void FibEntryMessage_NextHopRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FibEntryMessage_NextHopRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FibEntryMessage_NextHopRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FibEntryMessage_NextHopRecord_descriptor_;
}

const FibEntryMessage_NextHopRecord& FibEntryMessage_NextHopRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fib_2dentry_2eproto();
  return *default_instance_;
}

FibEntryMessage_NextHopRecord* FibEntryMessage_NextHopRecord::default_instance_ = NULL;

FibEntryMessage_NextHopRecord* FibEntryMessage_NextHopRecord::New() const {
  return new FibEntryMessage_NextHopRecord;
}

void FibEntryMessage_NextHopRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FibEntryMessage_NextHopRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(face_id_, cost_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FibEntryMessage_NextHopRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndn_message.FibEntryMessage.NextHopRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 face_id = 105;
      case 105: {
        if (tag == 840) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(848)) goto parse_cost;
        break;
      }

      // required uint32 cost = 106;
      case 106: {
        if (tag == 848) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndn_message.FibEntryMessage.NextHopRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndn_message.FibEntryMessage.NextHopRecord)
  return false;
#undef DO_
}

void FibEntryMessage_NextHopRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndn_message.FibEntryMessage.NextHopRecord)
  // required uint32 face_id = 105;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(105, this->face_id(), output);
  }

  // required uint32 cost = 106;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(106, this->cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndn_message.FibEntryMessage.NextHopRecord)
}

::google::protobuf::uint8* FibEntryMessage_NextHopRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndn_message.FibEntryMessage.NextHopRecord)
  // required uint32 face_id = 105;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(105, this->face_id(), target);
  }

  // required uint32 cost = 106;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(106, this->cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndn_message.FibEntryMessage.NextHopRecord)
  return target;
}

int FibEntryMessage_NextHopRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 face_id = 105;
    if (has_face_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face_id());
    }

    // required uint32 cost = 106;
    if (has_cost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FibEntryMessage_NextHopRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FibEntryMessage_NextHopRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FibEntryMessage_NextHopRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FibEntryMessage_NextHopRecord::MergeFrom(const FibEntryMessage_NextHopRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FibEntryMessage_NextHopRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FibEntryMessage_NextHopRecord::CopyFrom(const FibEntryMessage_NextHopRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FibEntryMessage_NextHopRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FibEntryMessage_NextHopRecord::Swap(FibEntryMessage_NextHopRecord* other) {
  if (other != this) {
    std::swap(face_id_, other->face_id_);
    std::swap(cost_, other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FibEntryMessage_NextHopRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FibEntryMessage_NextHopRecord_descriptor_;
  metadata.reflection = FibEntryMessage_NextHopRecord_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FibEntryMessage_FibEntry::kNameFieldNumber;
const int FibEntryMessage_FibEntry::kNextHopRecordsFieldNumber;
#endif  // !_MSC_VER

FibEntryMessage_FibEntry::FibEntryMessage_FibEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndn_message.FibEntryMessage.FibEntry)
}

void FibEntryMessage_FibEntry::InitAsDefaultInstance() {
  name_ = const_cast< ::ndn_message::FibEntryMessage_Name*>(&::ndn_message::FibEntryMessage_Name::default_instance());
}

FibEntryMessage_FibEntry::FibEntryMessage_FibEntry(const FibEntryMessage_FibEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndn_message.FibEntryMessage.FibEntry)
}

void FibEntryMessage_FibEntry::SharedCtor() {
  _cached_size_ = 0;
  name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FibEntryMessage_FibEntry::~FibEntryMessage_FibEntry() {
  // @@protoc_insertion_point(destructor:ndn_message.FibEntryMessage.FibEntry)
  SharedDtor();
}

void FibEntryMessage_FibEntry::SharedDtor() {
  if (this != default_instance_) {
    delete name_;
  }
}

void FibEntryMessage_FibEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FibEntryMessage_FibEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FibEntryMessage_FibEntry_descriptor_;
}

const FibEntryMessage_FibEntry& FibEntryMessage_FibEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fib_2dentry_2eproto();
  return *default_instance_;
}

FibEntryMessage_FibEntry* FibEntryMessage_FibEntry::default_instance_ = NULL;

FibEntryMessage_FibEntry* FibEntryMessage_FibEntry::New() const {
  return new FibEntryMessage_FibEntry;
}

void FibEntryMessage_FibEntry::Clear() {
  if (has_name()) {
    if (name_ != NULL) name_->::ndn_message::FibEntryMessage_Name::Clear();
  }
  next_hop_records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FibEntryMessage_FibEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndn_message.FibEntryMessage.FibEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ndn_message.FibEntryMessage.Name name = 7;
      case 7: {
        if (tag == 58) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1034)) goto parse_next_hop_records;
        break;
      }

      // repeated .ndn_message.FibEntryMessage.NextHopRecord next_hop_records = 129;
      case 129: {
        if (tag == 1034) {
         parse_next_hop_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_next_hop_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1034)) goto parse_next_hop_records;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndn_message.FibEntryMessage.FibEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndn_message.FibEntryMessage.FibEntry)
  return false;
#undef DO_
}

void FibEntryMessage_FibEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndn_message.FibEntryMessage.FibEntry)
  // required .ndn_message.FibEntryMessage.Name name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->name(), output);
  }

  // repeated .ndn_message.FibEntryMessage.NextHopRecord next_hop_records = 129;
  for (int i = 0; i < this->next_hop_records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      129, this->next_hop_records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndn_message.FibEntryMessage.FibEntry)
}

::google::protobuf::uint8* FibEntryMessage_FibEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndn_message.FibEntryMessage.FibEntry)
  // required .ndn_message.FibEntryMessage.Name name = 7;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->name(), target);
  }

  // repeated .ndn_message.FibEntryMessage.NextHopRecord next_hop_records = 129;
  for (int i = 0; i < this->next_hop_records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        129, this->next_hop_records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndn_message.FibEntryMessage.FibEntry)
  return target;
}

int FibEntryMessage_FibEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ndn_message.FibEntryMessage.Name name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name());
    }

  }
  // repeated .ndn_message.FibEntryMessage.NextHopRecord next_hop_records = 129;
  total_size += 2 * this->next_hop_records_size();
  for (int i = 0; i < this->next_hop_records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->next_hop_records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FibEntryMessage_FibEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FibEntryMessage_FibEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FibEntryMessage_FibEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FibEntryMessage_FibEntry::MergeFrom(const FibEntryMessage_FibEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  next_hop_records_.MergeFrom(from.next_hop_records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      mutable_name()->::ndn_message::FibEntryMessage_Name::MergeFrom(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FibEntryMessage_FibEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FibEntryMessage_FibEntry::CopyFrom(const FibEntryMessage_FibEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FibEntryMessage_FibEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->next_hop_records())) return false;
  return true;
}

void FibEntryMessage_FibEntry::Swap(FibEntryMessage_FibEntry* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    next_hop_records_.Swap(&other->next_hop_records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FibEntryMessage_FibEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FibEntryMessage_FibEntry_descriptor_;
  metadata.reflection = FibEntryMessage_FibEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FibEntryMessage::kFibEntryFieldNumber;
#endif  // !_MSC_VER

FibEntryMessage::FibEntryMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ndn_message.FibEntryMessage)
}

void FibEntryMessage::InitAsDefaultInstance() {
  fib_entry_ = const_cast< ::ndn_message::FibEntryMessage_FibEntry*>(&::ndn_message::FibEntryMessage_FibEntry::default_instance());
}

FibEntryMessage::FibEntryMessage(const FibEntryMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ndn_message.FibEntryMessage)
}

void FibEntryMessage::SharedCtor() {
  _cached_size_ = 0;
  fib_entry_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FibEntryMessage::~FibEntryMessage() {
  // @@protoc_insertion_point(destructor:ndn_message.FibEntryMessage)
  SharedDtor();
}

void FibEntryMessage::SharedDtor() {
  if (this != default_instance_) {
    delete fib_entry_;
  }
}

void FibEntryMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FibEntryMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FibEntryMessage_descriptor_;
}

const FibEntryMessage& FibEntryMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fib_2dentry_2eproto();
  return *default_instance_;
}

FibEntryMessage* FibEntryMessage::default_instance_ = NULL;

FibEntryMessage* FibEntryMessage::New() const {
  return new FibEntryMessage;
}

void FibEntryMessage::Clear() {
  if (has_fib_entry()) {
    if (fib_entry_ != NULL) fib_entry_->::ndn_message::FibEntryMessage_FibEntry::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FibEntryMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ndn_message.FibEntryMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ndn_message.FibEntryMessage.FibEntry fib_entry = 128;
      case 128: {
        if (tag == 1026) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fib_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ndn_message.FibEntryMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ndn_message.FibEntryMessage)
  return false;
#undef DO_
}

void FibEntryMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ndn_message.FibEntryMessage)
  // required .ndn_message.FibEntryMessage.FibEntry fib_entry = 128;
  if (has_fib_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      128, this->fib_entry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ndn_message.FibEntryMessage)
}

::google::protobuf::uint8* FibEntryMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ndn_message.FibEntryMessage)
  // required .ndn_message.FibEntryMessage.FibEntry fib_entry = 128;
  if (has_fib_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        128, this->fib_entry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ndn_message.FibEntryMessage)
  return target;
}

int FibEntryMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ndn_message.FibEntryMessage.FibEntry fib_entry = 128;
    if (has_fib_entry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fib_entry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FibEntryMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FibEntryMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FibEntryMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FibEntryMessage::MergeFrom(const FibEntryMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fib_entry()) {
      mutable_fib_entry()->::ndn_message::FibEntryMessage_FibEntry::MergeFrom(from.fib_entry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FibEntryMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FibEntryMessage::CopyFrom(const FibEntryMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FibEntryMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_fib_entry()) {
    if (!this->fib_entry().IsInitialized()) return false;
  }
  return true;
}

void FibEntryMessage::Swap(FibEntryMessage* other) {
  if (other != this) {
    std::swap(fib_entry_, other->fib_entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FibEntryMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FibEntryMessage_descriptor_;
  metadata.reflection = FibEntryMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ndn_message

// @@protoc_insertion_point(global_scope)
